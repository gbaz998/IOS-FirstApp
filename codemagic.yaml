workflows:
  ios_to_testflight:
    name: iOS â†’ TestFlight

    integrations:
      app_store_connect: "gbaz 15/9"

    environment:
      xcode: 16.4
      groups: [gbaz]
      vars:
        XCODE_PROJECT: "HelloWorld.xcodeproj"
        XCODE_SCHEME: "HelloWorld"
        BUNDLE_ID: "au.gbaz.app"

    scripts:
      - name: Codesign (ASC)
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles

      - name: Merge + heal asset catalog
        script: |
          set -e
          CANON="HelloWorld/Assets.xcassets"
          ROOT_JSON="$CANON/Contents.json"
          APPICON="$CANON/AppIcon.appiconset"

          # Merge any stray catalogs into canonical, then remove strays
          mkdir -p "$CANON"
          if [ -d assets.xcassets ]; then
            cp -R assets.xcassets/. "$CANON/" || true
            rm -rf assets.xcassets
          fi
          if [ -d helloworld/assets.xcassets ]; then
            cp -R helloworld/assets.xcassets/. "$CANON/" || true
            rm -rf helloworld/assets.xcassets
          fi

          # If paths exist as files (not dirs), back them up
          if [ -e "$CANON" ] && [ ! -d "$CANON" ]; then
            mv -f "$CANON" "${CANON}.bak.$(date +%s)"
            mkdir -p "$CANON"
          fi
          if [ -e "$APPICON" ] && [ ! -d "$APPICON" ]; then
            mv -f "$APPICON" "${APPICON}.bak.$(date +%s)"
          fi

          # Fix casing inside and ensure structure
          [ -d "$CANON/appicon.appiconset" ] && mv -f "$CANON/appicon.appiconset" "$APPICON"
          mkdir -p "$APPICON"
          [ -f "$APPICON/contents.json" ] && mv -f "$APPICON/contents.json" "$APPICON/Contents.json"

          # Ensure root Contents.json (actool reads tags from here)
          if [ ! -f "$ROOT_JSON" ] || ! plutil -lint "$ROOT_JSON" >/dev/null 2>&1; then
            printf '%s\n' '{ "info": { "version": 1, "author": "xcode" } }' > "$ROOT_JSON"
          fi

          # Minimal valid AppIcon if missing/invalid
          if [ ! -f "$APPICON/Contents.json" ] || ! plutil -lint "$APPICON/Contents.json" >/dev/null 2>&1; then
            printf '%s\n' '{ "images":[{"idiom":"ios-marketing","size":"1024x1024","scale":"1x","filename":"AppIcon-1024.png"}], "info":{"version":1,"author":"xcode"} }' > "$APPICON/Contents.json"
          fi
          if [ ! -f "$APPICON/AppIcon-1024.png" ]; then
            /usr/bin/sips -s format png --resampleHeightWidth 1024 1024 \
              /System/Library/CoreServices/DefaultDesktop.jpg \
              --out "$APPICON/AppIcon-1024.png" >/dev/null 2>&1 || true
          fi

          echo "=== Assets tree ==="
          find "$CANON" -maxdepth 2 -print || true

      - name: Normalize project refs (assets + AppIcon + min iOS)
        script: |
          set -e
          PBX="HelloWorld.xcodeproj/project.pbxproj"
          # If your project is elsewhere, adjust PBX path or set XCODE_PROJECT accordingly

          # macOS sed in place; ignore if not found
          /usr/bin/sed -i '' -E 's/assets\.xcassets/Assets.xcassets/g' "$PBX" || true
          /usr/bin/sed -i '' -E 's/appicon\.appiconset/AppIcon.appiconset/g' "$PBX" || true
          /usr/bin/sed -i '' -E 's/ASSETCATALOG_COMPILER_APPICON_NAME = [^;]*/ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon/' "$PBX" || true
          /usr/bin/sed -i '' -E 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+/IPHONEOS_DEPLOYMENT_TARGET = 12.0/' "$PBX" || true

          echo "=== pbxproj matches ==="
          /usr/bin/grep -n "Assets.xcassets\|AppIcon" "$PBX" || true

      - name: Ensure Info.plist usage descriptions
        script: |
          set -e
          PLIST="HelloWorld/Info.plist"
          ensure() { /usr/libexec/PlistBuddy -c "Set :$1 $2" "$PLIST" 2>/dev/null || /usr/libexec/PlistBuddy -c "Add :$1 string $2" "$PLIST"; }
          ensure UIMainStoryboardFile "Main"
          ensure UILaunchStoryboardName "LaunchScreen"
          ensure NSMicrophoneUsageDescription "Needed for sound recognition."
          ensure NSLocationWhenInUseUsageDescription "Needed to place discoveries on the Sydney CBD map."
          # Add more keys here if you use them (camera/photos/etc.)

      - name: Build IPA
        script: |
          set -e
          xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"

    artifacts:
      - "$CM_BUILD_DIR/*.ipa"
      - "$CM_BUILD_DIR/app.xcarchive"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
