workflows:
  ios_release:
    name: iOS Release to TestFlight (diagnostic)
    integrations:
      app_store_connect: gbaz-asc
    environment:
      xcode: 16.4
      vars:
        APP_SCHEME: "HelloWorld"              # preferred scheme
        PROJECT_PATH: "HelloWorld.xcodeproj"
        BUNDLE_ID: "au.gbaz.app"
        DEV_TEAM_ID: "8WPD9W2B39"
    scripts:
      - name: Show Xcode project details
        script: |
          xcodebuild -list -project "$PROJECT_PATH" || true

      - name: Locate & bump build number
        script: |
          set -euo pipefail
          echo "Looking for Info.plist with CFBundleIdentifier=$BUNDLE_ID"
          PLIST_PATH=""
          while IFS= read -r -d '' P; do
            ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$P" 2>/dev/null || true)
            if [ "$ID" = "$BUNDLE_ID" ]; then PLIST_PATH="$P"; break; fi
          done < <(find . -type f -name Info.plist -print0)
          if [ -z "$PLIST_PATH" ]; then
            echo "❌ No Info.plist found with CFBundleIdentifier=$BUNDLE_ID"; exit 1
          fi
          echo "✅ Found Info.plist: $PLIST_PATH"
          /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.0.0" "$PLIST_PATH" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string 1" "$PLIST_PATH" 2>/dev/null || true
          : "${BUILD_NUMBER:=1}"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" "$PLIST_PATH" \
            || /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $BUILD_NUMBER" "$PLIST_PATH"
          echo "✅ CFBundleVersion -> $BUILD_NUMBER at $PLIST_PATH"

      - name: Choose build scheme (fallback if needed)
        script: |
          set -euo pipefail
          SCHEMES=$(xcodebuild -list -project "$PROJECT_PATH" | awk '/Schemes:/{p=1;next} p && NF{print}' || true)
          echo "Schemes visible:"; echo "$SCHEMES"
          if echo "$SCHEMES" | grep -qx "$APP_SCHEME"; then
            USE_SCHEME="$APP_SCHEME"
          else
            USE_SCHEME="$(echo "$SCHEMES" | head -n1 | tr -d '\r')"
            if [ -z "$USE_SCHEME" ]; then
              echo "❌ No buildable schemes found. Make sure at least one scheme is Shared."; exit 1
            fi
            echo "⚠️ Preferred scheme '$APP_SCHEME' not found; using '$USE_SCHEME'."
          fi
          echo "export BUILD_SCHEME=\"$USE_SCHEME\"" >> $CM_ENV
          echo "✅ Will build with scheme: $USE_SCHEME"

      - name: Print effective signing settings
        script: |
          set -euo pipefail
          xcodebuild -showBuildSettings \
            -project "$PROJECT_PATH" \
            -scheme "${BUILD_SCHEME:-$APP_SCHEME}" \
            -configuration Release | egrep "PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER" || true

      - name: Build archive (diagnostic)
        script: |
          set -euo pipefail
          LOG="$CM_BUILD_DIR/xcodebuild_archive.log"
          echo "🔧 Archiving… (log: $LOG)"
          set +e
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "${BUILD_SCHEME:-$APP_SCHEME}" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath "$CM_BUILD_DIR/app.xcarchive" \
            -allowProvisioningUpdates \
            clean archive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$DEV_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            SWIFT_VERSION=5.0 \
            IPHONEOS_DEPLOYMENT_TARGET=12.0 \
            | tee "$LOG"
          STATUS=${PIPESTATUS[0]}
          set -e
          if [ $STATUS -ne 0 ]; then
            echo "❌ xcodebuild failed (status $STATUS). Most relevant error lines:"
            egrep -i "error:|No such module|provision|sign|profile|bundle identifier|scheme" "$LOG" || true
            exit $STATUS
          fi
          echo "✅ Archive succeeded."

      - name: Export IPA
        script: |
          cat > /tmp/exportOptions.plist <<'PLIST'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>uploadSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>signingStyle</key><string>automatic</string>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/app.xcarchive" \
            -exportOptionsPlist /tmp/exportOptions.plist \
            -exportPath "$CM_BUILD_DIR/Export"

    artifacts:
      - $CM_BUILD_DIR/Export/*.ipa
      - $CM_BUILD_DIR/app.xcarchive/dSYMs/*.dSYM

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        beta_groups:
          - "gbaz-testers"
