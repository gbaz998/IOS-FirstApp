workflows:
  ios_to_testflight:
    name: iOS â†’ TestFlight

    integrations:
      app_store_connect: "gbaz 15/9"

    environment:
      xcode: 16.4
      groups: [gbaz]
      vars:
        XCODE_PROJECT: "HelloWorld.xcodeproj"
        XCODE_SCHEME: "HelloWorld"
        BUNDLE_ID: "au.gbaz.app"

    scripts:
      - name: Codesign (ASC)
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles

      - name: Prep project (target 12.0 + assets paths)
        script: |
          set -e
          PBX="HelloWorld.xcodeproj/project.pbxproj"

          # Keep min iOS consistent
          /usr/bin/sed -i '' -E 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9]+(\.[0-9]+)?/IPHONEOS_DEPLOYMENT_TARGET = 12.0/g' "$PBX" || true

          # Canonical catalog path
          CATALOG="HelloWorld/Assets.xcassets"
          [ -e "$CATALOG" ] && [ ! -d "$CATALOG" ] && mv -f "$CATALOG" "${CATALOG}.bak.$(date +%s)"
          mkdir -p "$CATALOG"

          # Pull in any stray catalogs then remove them
          [ -d assets.xcassets ] && { cp -R assets.xcassets/. "$CATALOG/"; rm -rf assets.xcassets; }
          [ -d helloworld/assets.xcassets ] && { cp -R helloworld/assets.xcassets/. "$CATALOG/"; rm -rf helloworld/assets.xcassets; }

          # Normalize common case issues
          [ -d "$CATALOG/appicon.appiconset" ] && mv -f "$CATALOG/appicon.appiconset" "$CATALOG/AppIcon.appiconset"
          [ -f "$CATALOG/AppIcon.appiconset/contents.json" ] && mv -f "$CATALOG/AppIcon.appiconset/contents.json" "$CATALOG/AppIcon.appiconset/Contents.json"

          # Update project refs
          /usr/bin/sed -i '' 's/assets\.xcassets/Assets.xcassets/g' "$PBX" || true
          /usr/bin/sed -i '' 's/appicon\.appiconset/AppIcon.appiconset/g' "$PBX" || true
          /usr/bin/sed -i '' 's/ASSETCATALOG_COMPILER_APPICON_NAME = [^;]*/ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon/' "$PBX" || true

      - name: Fix resources (AppIcon + storyboards)
        script: |
          set -e
          CATALOG="HelloWorld/Assets.xcassets"
          APPICON="$CATALOG/AppIcon.appiconset"
          mkdir -p "$APPICON"

          # Root Contents.json
          if [ ! -f "$CATALOG/Contents.json" ] || ! plutil -lint "$CATALOG/Contents.json" >/dev/null 2>&1; then
            printf '%s\n' '{ "info": { "version": 1, "author": "xcode" } }' > "$CATALOG/Contents.json"
          fi

          # Minimal AppIcon (placeholder) if missing/invalid
          if [ ! -f "$APPICON/Contents.json" ] || ! plutil -lint "$APPICON/Contents.json" >/dev/null 2>&1; then
            printf '%s\n' '{ "images":[{"idiom":"ios-marketing","size":"1024x1024","scale":"1x","filename":"AppIcon-1024.png"}], "info":{"version":1,"author":"xcode"} }' > "$APPICON/Contents.json"
          fi
          [ -f "$APPICON/AppIcon-1024.png" ] || /usr/bin/sips -s format png --resampleHeightWidth 1024 1024 /System/Library/CoreServices/DefaultDesktop.jpg --out "$APPICON/AppIcon-1024.png" >/dev/null 2>&1 || true

          # Storyboards (write minimal valid ones if missing/invalid)
          mkdir -p "HelloWorld/Base.lproj"
          MAIN="HelloWorld/Base.lproj/Main.storyboard"
          LAUNCH="HelloWorld/Base.lproj/LaunchScreen.storyboard"
          IB="/Applications/Xcode-16.4.app/Contents/Developer/usr/bin/ibtool"

          validate() { "$IB" --compile "/tmp/$(basename "$1" .storyboard).cib" "$1" >/dev/null 2>&1; }

          if ! [ -f "$MAIN" ] || ! validate "$MAIN"; then
            printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?><document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="20037" targetRuntime="iOS.CocoaTouch" useAutolayout="YES" initialViewController="VC"><scenes><scene sceneID="scene"><objects><viewController id="VC" sceneMemberID="viewController"><view key="view" contentMode="scaleToFill" id="view"><rect key="frame" x="0" y="0" width="390" height="844"/><autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/><color key="backgroundColor" systemColor="systemBackgroundColor"/></view></viewController><placeholder placeholderIdentifier="IBFirstResponder" id="responder" sceneMemberID="firstResponder"/></objects></scene></scenes></document>' > "$MAIN"
          fi
          if ! [ -f "$LAUNCH" ] || ! validate "$LAUNCH"; then
            printf '%s\n' '<?xml version="1.0" encoding="UTF-8"?><document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="20037" targetRuntime="iOS.CocoaTouch" useAutolayout="YES" launchScreen="YES"><scenes><scene sceneID="launch"><objects><viewController id="launchVC" sceneMemberID="viewController"><view key="view" contentMode="scaleToFill" id="launchView"><rect key="frame" x="0" y="0" width="390" height="844"/><autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/><color key="backgroundColor" systemColor="systemBackgroundColor"/></view></viewController><placeholder placeholderIdentifier="IBFirstResponder" id="launchResponder" sceneMemberID="firstResponder"/></objects></scene></scenes></document>' > "$LAUNCH"
          fi

          "$IB" --compile /tmp/Main.cib "$MAIN"
          "$IB" --compile /tmp/Launch.cib "$LAUNCH"

      - name: Ensure Swift sources (AppDelegate + ViewController)
        script: |
          set -e
          SRC="HelloWorld"
          mkdir -p "$SRC"

          # Create AppDelegate.swift if missing
          if [ ! -f "$SRC/AppDelegate.swift" ]; then
            cat > "$SRC/AppDelegate.swift" <<'SWIFT'
import UIKit
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  var window: UIWindow?
  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool { true }
}
SWIFT
          fi

          # Create ViewController.swift if missing (iOS 12 safe)
          if [ ! -f "$SRC/ViewController.swift" ]; then
            cat > "$SRC/ViewController.swift" <<'SWIFT'
import UIKit
class ViewController: UIViewController {
  override func viewDidLoad() {
    super.viewDidLoad()
    if #available(iOS 13.0, *) {
      view.backgroundColor = .systemBackground
    } else {
      view.backgroundColor = .white
    }
  }
}
SWIFT
          fi

      - name: Build IPA (and copy to your artifact path)
        script: |
          set -e
          xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"

          # Copy resulting .ipa to build/ios/ipa/HelloWorld.ipa so artifacts rule always matches
          mkdir -p build/ios/ipa
          IPA_SRC=$(find "$CM_BUILD_DIR" -type f -name "*.ipa" | head -n1 || true)
          if [ -n "$IPA_SRC" ]; then
            cp -f "$IPA_SRC" build/ios/ipa/HelloWorld.ipa
            echo "Copied IPA to build/ios/ipa/HelloWorld.ipa"
          else
            echo "WARNING: No IPA found under $CM_BUILD_DIR"
          fi

    artifacts:
      - "build/ios/ipa/HelloWorld.ipa"   # your explicit successful path
      - "$CM_BUILD_DIR/ios/ipa/*.ipa"    # fallback, keep collecting from default location
      - "$CM_BUILD_DIR/app.xcarchive"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true


