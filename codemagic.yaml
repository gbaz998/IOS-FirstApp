workflows:
  ios_to_testflight:
    name: iOS â†’ TestFlight

    integrations:
      app_store_connect: "gbaz 15/9"

    environment:
      xcode: 16.4
      groups: [gbaz]
      vars:
        XCODE_PROJECT: "HelloWorld.xcodeproj"
        XCODE_SCHEME: "HelloWorld"
        BUNDLE_ID: "au.gbaz.app"

    scripts:
      - name: Codesign (ASC)
        script: |
          set -e
          keychain initialize
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create
          keychain add-certificates
          xcode-project use-profiles

      - name: Merge + heal asset catalog (robust)
        script: |
          set -e
          CANON="HelloWorld/Assets.xcassets"
          ROOT_JSON="$CANON/Contents.json"
          APPICON="$CANON/AppIcon.appiconset"

          # If canonical path exists as a file, back it up then create dir
          if [ -e "$CANON" ] && [ ! -d "$CANON" ]; then
            TS=$(date +%s)
            mv -f "$CANON" "${CANON}.bak.$TS"
          fi
          mkdir -p "$CANON"

          # Merge any stray catalogs into canonical, then remove strays
          for SRC in assets.xcassets helloworld/assets.xcassets HelloWorld/assets.xcassets Assets.xcassets; do
            if [ -d "$SRC" ] && [ "$SRC" != "$CANON" ]; then
              cp -R "$SRC/." "$CANON/" || true
              rm -rf "$SRC"
            fi
          done

          # Normalize AppIcon casing and structure
          if [ -e "$APPICON" ] && [ ! -d "$APPICON" ]; then
            TS=$(date +%s)
            mv -f "$APPICON" "${APPICON}.bak.$TS"
          fi
          if [ -d "$CANON/appicon.appiconset" ] && [ ! -d "$APPICON" ]; then
            mv -f "$CANON/appicon.appiconset" "$APPICON"
          fi
          mkdir -p "$APPICON"
          [ -f "$APPICON/contents.json" ] && mv -f "$APPICON/contents.json" "$APPICON/Contents.json"

          # Ensure root Contents.json
          if [ ! -f "$ROOT_JSON" ] || ! plutil -lint "$ROOT_JSON" >/dev/null 2>&1; then
            printf '%s\n' '{ "info": { "version": 1, "author": "xcode" } }' > "$ROOT_JSON"
          fi

          # Minimal valid AppIcon
          if [ ! -f "$APPICON/Contents.json" ] || ! plutil -lint "$APPICON/Contents.json" >/dev/null 2>&1; then
            printf '%s\n' '{ "images":[{"idiom":"ios-marketing","size":"1024x1024","scale":"1x","filename":"AppIcon-1024.png"}], "info":{"version":1,"author":"xcode"} }' > "$APPICON/Contents.json"
          fi
          [ -f "$APPICON/AppIcon-1024.png" ] || /usr/bin/sips -s format png --resampleHeightWidth 1024 1024 /System/Library/CoreServices/DefaultDesktop.jpg --out "$APPICON/AppIcon-1024.png" >/dev/null 2>&1 || true

      - name: Validate & auto-repair storyboards
        script: |
          set -e
          IB="/Applications/Xcode-16.4.app/Contents/Developer/usr/bin/ibtool"
          BASE="HelloWorld/Base.lproj"
          MAIN="$BASE/Main.storyboard"
          LAUNCH="$BASE/LaunchScreen.storyboard"
          mkdir -p "$BASE"

          validate_sb() { "$IB" --compile "/tmp/$(basename "$1" .storyboard).cib" "$1" >/dev/null 2>&1; }

          if ! [ -f "$MAIN" ] || ! validate_sb "$MAIN"; then
            cat > "$MAIN" <<'SB'
<?xml version="1.0" encoding="UTF-8"?><document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="20037" targetRuntime="iOS.CocoaTouch" useAutolayout="YES" initialViewController="VC"><scenes><scene sceneID="scene"><objects><viewController id="VC" sceneMemberID="viewController"><view key="view" contentMode="scaleToFill" id="view"><rect key="frame" x="0" y="0" width="390" height="844"/><autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/><color key="backgroundColor" systemColor="systemBackgroundColor"/></view></viewController><placeholder placeholderIdentifier="IBFirstResponder" id="responder" sceneMemberID="firstResponder"/></objects></scene></scenes></document>
SB
          fi
          if ! [ -f "$LAUNCH" ] || ! validate_sb "$LAUNCH"; then
            cat > "$LAUNCH" <<'SB'
<?xml version="1.0" encoding="UTF-8"?><document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="20037" targetRuntime="iOS.CocoaTouch" useAutolayout="YES" launchScreen="YES"><scenes><scene sceneID="launch"><objects><viewController id="launchVC" sceneMemberID="viewController"><view key="view" contentMode="scaleToFill" id="launchView"><rect key="frame" x="0" y="0" width="390" height="844"/><autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/><color key="backgroundColor" systemColor="systemBackgroundColor"/></view></viewController><placeholder placeholderIdentifier="IBFirstResponder" id="launchResponder" sceneMemberID="firstResponder"/></objects></scene></scenes></document>
SB
          fi

          "$IB" --compile /tmp/Main.cib "$MAIN"
          "$IB" --compile /tmp/Launch.cib "$LAUNCH"

      - name: Relocate Swift sources to expected paths/casing
        script: |
          set -e
          mkdir -p HelloWorld
          # Move your existing files into canonical paths (case-sensitive)
          [ -f helloworld/helloworld/viewcontroller.swift ] && mv -f helloworld/helloworld/viewcontroller.swift HelloWorld/ViewController.swift
          [ -f helloworld/appdelegate.swift ] && mv -f helloworld/appdelegate.swift HelloWorld/AppDelegate.swift
          # Handle other common variants
          [ -f helloworld/HelloWorld/ViewController.swift ] && mv -f helloworld/HelloWorld/ViewController.swift HelloWorld/ViewController.swift
          [ -f helloworld/AppDelegate.swift ] && mv -f helloworld/AppDelegate.swift HelloWorld/AppDelegate.swift

      - name: Ensure Swift sources (create only if missing)
        script: |
          set -e
          SRC="HelloWorld"
          mkdir -p "$SRC"

          if [ ! -f "$SRC/AppDelegate.swift" ]; then
            cat > "$SRC/AppDelegate.swift" <<'SWIFT'
import UIKit
@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  var window: UIWindow?
  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool { true }
}
SWIFT
          fi

          if [ ! -f "$SRC/ViewController.swift" ]; then
            cat > "$SRC/ViewController.swift" <<'SWIFT'
import UIKit
class ViewController: UIViewController {
  override func viewDidLoad() {
    super.viewDidLoad()
    if #available(iOS 13.0, *) {
      view.backgroundColor = .systemBackground
    } else {
      view.backgroundColor = .white
    }
  }
}
SWIFT
          fi

          echo "=== Swift sources present ==="
          ls -l "$SRC"/AppDelegate.swift "$SRC"/ViewController.swift

      - name: Normalize project refs (assets + AppIcon + min iOS)
        script: |
          set -e
          PBX="HelloWorld.xcodeproj/project.pbxproj"  # adjust if your .xcodeproj lives elsewhere
          /usr/bin/sed -i '' -E 's/assets\.xcassets/Assets.xcassets/g' "$PBX" || true
          /usr/bin/sed -i '' -E 's/appicon\.appiconset/AppIcon.appiconset/g' "$PBX" || true
          /usr/bin/sed -i '' -E 's/ASSETCATALOG_COMPILER_APPICON_NAME = [^;]*/ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon/' "$PBX" || true
          /usr/bin/sed -i '' -E 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+/IPHONEOS_DEPLOYMENT_TARGET = 12.0/' "$PBX" || true

      - name: Ensure Info.plist usage descriptions
        script: |
          set -e
          PLIST="HelloWorld/Info.plist"
          ensure() { /usr/libexec/PlistBuddy -c "Set :$1 $2" "$PLIST" 2>/dev/null || /usr/libexec/PlistBuddy -c "Add :$1 string $2" "$PLIST"; }
          ensure UIMainStoryboardFile "Main"
          ensure UILaunchStoryboardName "LaunchScreen"
          ensure NSMicrophoneUsageDescription "Needed for sound recognition."
          ensure NSLocationWhenInUseUsageDescription "Needed to place discoveries on the Sydney CBD map."

      - name: Build IPA
        script: |
          set -e
          xcode-project build-ipa --project "$XCODE_PROJECT" --scheme "$XCODE_SCHEME"

    artifacts:
      - "$CM_BUILD_DIR/*.ipa"
      - "$CM_BUILD_DIR/app.xcarchive"

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
